package PurchaseManager;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import shared.utils.PurchaseOrderUtils;
import shared.frames.EditPurchaseOrderDialog;

public class ViewPurchaseOrder extends javax.swing.JFrame {

    private PMDashboard previousForm;
    private TableRowSorter<DefaultTableModel> sorter;
    
    public ViewPurchaseOrder() {
        initComponents();
        setupTableListeners(); 
        loadPurchaseOrders();
    }
    public ViewPurchaseOrder(PMDashboard previousForm) {
        this();
        this.previousForm = previousForm;
    }

//add a constructor field to track if the edit was confirmed
    private boolean editConfirmed = false;
    

    private void setupTableListeners() {
        poTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = poTable.getSelectedRow();
                    boolean rowSelected = selectedRow >= 0;
                    EditPOButton.setEnabled(rowSelected);
                    
                    // Enable delete button only if a row is selected
                    if (rowSelected) {
                        int modelRow = poTable.convertRowIndexToModel(selectedRow);
                        String status = poTable.getModel().getValueAt(modelRow, 12).toString();
                        // Only enable delete for PENDING status
                        deleteButton.setEnabled(status.equals("PENDING"));                        
                    } else {
                        deleteButton.setEnabled(false);
                    }
                }
            }
        });
        DefaultTableModel model = (DefaultTableModel) poTable.getModel();
        sorter = new TableRowSorter<>(model);
        poTable.setRowSorter(sorter);        
    }


    private void loadPurchaseOrders() {
        try {
            DefaultTableModel model = (DefaultTableModel) poTable.getModel();
            model.setRowCount(0);
            PurchaseOrderUtils.loadPurchaseOrdersToTable(model);
            
            // Apply filter if not showing all
            applyStatusFilter();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                    "Error loading purchase orders: " + e.getMessage(),
                    "Database Error", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    private void applyStatusFilter() {
        String selectedStatus = (String) jComboBox1.getSelectedItem();
        
        if (selectedStatus.equals("ALL")) {
            sorter.setRowFilter(null); // No filter
        } else {
            // Filter by status (status is at index 12)
            sorter.setRowFilter(RowFilter.regexFilter("^" + selectedStatus + "$", 12));
        }
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FrameBG = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        titleGeneratePurchaseOrder = new javax.swing.JLabel();
        bottomPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        poTable = new javax.swing.JTable();
        txtPurchaseOrders = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        ButtonPanel = new javax.swing.JPanel();
        EditPOButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generate Purchase Order");

        FrameBG.setBackground(new java.awt.Color(255, 255, 255));
        FrameBG.setAlignmentX(0.0F);
        FrameBG.setAlignmentY(0.0F);
        FrameBG.setPreferredSize(new java.awt.Dimension(750, 550));

        titlePanel.setBackground(new java.awt.Color(255, 255, 204));
        titlePanel.setAlignmentX(0.0F);
        titlePanel.setAlignmentY(0.0F);
        titlePanel.setPreferredSize(new java.awt.Dimension(706, 70));
        titlePanel.setLayout(new java.awt.BorderLayout());

        titleGeneratePurchaseOrder.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        titleGeneratePurchaseOrder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleGeneratePurchaseOrder.setText("View Purchase Order");
        titleGeneratePurchaseOrder.setAlignmentY(0.0F);
        titleGeneratePurchaseOrder.setMaximumSize(new java.awt.Dimension(237, 30));
        titleGeneratePurchaseOrder.setMinimumSize(new java.awt.Dimension(237, 30));
        titleGeneratePurchaseOrder.setPreferredSize(new java.awt.Dimension(237, 30));
        titlePanel.add(titleGeneratePurchaseOrder, java.awt.BorderLayout.CENTER);

        bottomPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Filter by Status : ");

        poTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PO ID", "PR ID", "Item ID", "Item Name", "Quantity", "Item Price", "Total Price", "Date Created PO", "Date Required", "Supplier ID", "SM ID", "PM ID", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(poTable);

        txtPurchaseOrders.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtPurchaseOrders.setText("Purchase Orders");

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "PENDING", "APPROVED", "REJECTED", "PAID", "RECEIVED_ITEMS" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1082, Short.MAX_VALUE)
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bottomPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtPurchaseOrders))
                            .addGroup(bottomPanelLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtPurchaseOrders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                .addContainerGap())
        );

        ButtonPanel.setBackground(new java.awt.Color(255, 255, 255));

        EditPOButton.setBackground(new java.awt.Color(0, 204, 102));
        EditPOButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        EditPOButton.setForeground(new java.awt.Color(255, 255, 255));
        EditPOButton.setText("Edit Purchase Order");
        EditPOButton.setEnabled(false);
        EditPOButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPOButtonActionPerformed(evt);
            }
        });
        ButtonPanel.add(EditPOButton);

        deleteButton.setBackground(new java.awt.Color(255, 102, 102));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        ButtonPanel.add(deleteButton);

        refreshButton.setBackground(new java.awt.Color(33, 150, 243));
        refreshButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        refreshButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        ButtonPanel.add(refreshButton);

        backButton.setBackground(new java.awt.Color(102, 102, 102));
        backButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        ButtonPanel.add(backButton);

        javax.swing.GroupLayout FrameBGLayout = new javax.swing.GroupLayout(FrameBG);
        FrameBG.setLayout(FrameBGLayout);
        FrameBGLayout.setHorizontalGroup(
            FrameBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FrameBGLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FrameBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bottomPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(FrameBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE))
        );
        FrameBGLayout.setVerticalGroup(
            FrameBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FrameBGLayout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(FrameBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(FrameBGLayout.createSequentialGroup()
                    .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 698, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FrameBG, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FrameBG, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (previousForm != null) {
            previousForm.setVisible(true);
        }
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void EditPOButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPOButtonActionPerformed
        int selectedRow = poTable.getSelectedRow();
        if (selectedRow < 0) {
            return; // No row selected
        }
        
        // Convert to model index in case table is sorted/filtered
        int modelRow = poTable.convertRowIndexToModel(selectedRow);
        
        try {
            // Get PO details from the table
            String poId = poTable.getModel().getValueAt(modelRow, 0).toString();
            String status = poTable.getModel().getValueAt(modelRow, 12).toString();
            
            // Check if status is PAID or RECEIVED_ITEMS
            if (status.equals("PAID") || status.equals("RECEIVED_ITEMS")) {
                JOptionPane.showMessageDialog(this,
                    "Purchase orders with status '" + status + "' cannot be edited.",
                    "Edit Not Allowed",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // Open the EditPurchaseOrderDialog with these details
            EditPurchaseOrderDialog dialog = new EditPurchaseOrderDialog(
                    null, true);
                    
            // Set the PO data in the dialog
            dialog.loadPurchaseOrderData(poId);
            
            // Position the dialog relative to this form
            dialog.setLocationRelativeTo(this);
            
            // Show dialog
            dialog.setVisible(true);
            
            // Refresh the PO list
            loadPurchaseOrders();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                    "Error editing Purchase Order: " + e.getMessage(),
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_EditPOButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        loadPurchaseOrders();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
       applyStatusFilter();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedRow = poTable.getSelectedRow();
        if (selectedRow < 0) {
            return; // No row selected
        }
        
        // Convert to model index in case table is sorted/filtered
        int modelRow = poTable.convertRowIndexToModel(selectedRow);
        
        try {
            // Get PO details from the table
            String poId = poTable.getModel().getValueAt(modelRow, 0).toString();
            String prId = poTable.getModel().getValueAt(modelRow, 1).toString();
            String status = poTable.getModel().getValueAt(modelRow, 12).toString();
            
            // Check if status is PENDING
            if (!status.equals("PENDING")) {
                JOptionPane.showMessageDialog(this,
                    "Only purchase orders with PENDING status can be deleted.",
                    "Delete Not Allowed",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // Confirm deletion
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete Purchase Order " + poId + "?",
                    "Confirm Delete",
                    JOptionPane.YES_NO_OPTION);
            
            if (confirm == JOptionPane.YES_OPTION) {
                // Delete the purchase order
                boolean deleted = PurchaseOrderUtils.deletePurchaseOrder(poId);
                
                if (deleted) {
                    // Also update the PR status back to PENDING
                    PurchaseOrderUtils.updatePRStatus(prId, "Pending");
                    
                    JOptionPane.showMessageDialog(this,
                            "Purchase Order " + poId + " has been deleted successfully.",
                            "Delete Successful",
                            JOptionPane.INFORMATION_MESSAGE);
                    
                    // Refresh the table
                    loadPurchaseOrders();
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Failed to delete Purchase Order.",
                            "Delete Failed",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                    "Error deleting Purchase Order: " + e.getMessage(),
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPurchaseOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPurchaseOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPurchaseOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPurchaseOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPurchaseOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton EditPOButton;
    private javax.swing.JPanel FrameBG;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable poTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel titleGeneratePurchaseOrder;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel txtPurchaseOrders;
    // End of variables declaration//GEN-END:variables
}
